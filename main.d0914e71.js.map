{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","getRequest","url","fetch","then","response","ok","Error","status","json","getPhoneIdList","result","map","phone","id","getFirstReceivedDetails","arr","Promise","race","phoneId","res","getAllReceivedDetails","all","getThreeFastestDetails","showDetails","divClass","title","document","body","insertAdjacentHTML","name","toUpperCase","join","idList"],"mappings":";AAAA,aAGA,IAAMA,EACH,mEAEGC,EAAa,WAACC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACjBC,OAAAA,MAASH,GAAAA,OAAAA,GAAWE,OAAAA,EAApB,UAAgCE,KAAK,SAAAC,GACtC,IAACA,EAASC,GACN,MAAA,IAAIC,MAA2BF,oBAAAA,EAASG,QAGzCH,OAAAA,EAASI,UAIdC,EAAiB,WACdT,OAAAA,IAAaG,KAAK,SAAAO,GAAUA,OAAAA,EAAOC,IAAI,SAAAC,GAASA,OAAAA,EAAMC,QAGzDC,EAA0B,SAAAC,GACvBC,OAAAA,QAAQC,KAAKF,EAAIJ,IAAI,SAAAO,GAAWlB,OAAAA,EAAekB,IAAAA,OAAAA,OACnDf,KAAK,SAAAgB,GAAO,MAAA,CAACA,MAGZC,EAAwB,SAAAL,GACrBC,OAAAA,QAAQK,IAAIN,EAAIJ,IAAI,SAAAO,GAAWlB,OAAAA,EAAekB,IAAAA,OAAAA,QAGjDI,EAAyB,SAAAP,GACtBC,OAAAA,QAAQK,IAAI,CACjBL,QAAQC,KAAKF,EAAIJ,IAAI,SAAAO,GAAWlB,OAAAA,EAAekB,IAAAA,OAAAA,OAC/CF,QAAQC,KAAKF,EAAIJ,IAAI,SAAAO,GAAWlB,OAAAA,EAAekB,IAAAA,OAAAA,OAC/CF,QAAQC,KAAKF,EAAIJ,IAAI,SAAAO,GAAWlB,OAAAA,EAAekB,IAAAA,OAAAA,UAI7CK,EAAc,SAACC,EAAUC,EAAOf,GACpCgB,SAASC,KAAKC,mBAAmB,aACjBJ,qBAAAA,OAAAA,EACYC,oCAAAA,OAAAA,EAEpBf,+BAAAA,OAAAA,EAAOC,IAAI,SAAAC,GACLA,MAAAA,mBAAAA,OAAAA,EAAMiB,KAAUjB,OAAAA,OAAAA,EAAMC,GAAGiB,cADf,qBAEfC,KAAK,IANd,mCAYFtB,IACGN,KAAK,SAAA6B,GAAUZ,OAAAA,EAAsBY,KACrC7B,KAAK,SAAAgB,GAAOI,OAAAA,EAAY,iBAAkB,iBAAkBJ,KAE/DV,IACGN,KAAK,SAAA6B,GAAUlB,OAAAA,EAAwBkB,KACvC7B,KAAK,SAAAgB,GAAOI,OAAAA,EAAY,iBAAkB,iBAAkBJ,KAE/DV,IACGN,KAAK,SAAA6B,GAAUV,OAAAA,EAAuBU,KACtC7B,KAAK,SAAAgB,GAAOI,OAAAA,EAAY,gBAAiB,gBAAiBJ","file":"main.d0914e71.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write code here\nconst BASE_URL\n = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\n\nconst getRequest = (url = '') => {\n  return fetch(`${BASE_URL}${url}.json`).then(response => {\n    if (!response.ok) {\n      throw new Error(`Error from server`, response.status);\n    }\n\n    return response.json();\n  });\n};\n\nconst getPhoneIdList = () => {\n  return getRequest().then(result => result.map(phone => phone.id));\n};\n\nconst getFirstReceivedDetails = arr => {\n  return Promise.race(arr.map(phoneId => getRequest(`/${phoneId}`)))\n    .then(res => [res]);\n};\n\nconst getAllReceivedDetails = arr => {\n  return Promise.all(arr.map(phoneId => getRequest(`/${phoneId}`)));\n};\n\nconst getThreeFastestDetails = arr => {\n  return Promise.all([\n    Promise.race(arr.map(phoneId => getRequest(`/${phoneId}`))),\n    Promise.race(arr.map(phoneId => getRequest(`/${phoneId}`))),\n    Promise.race(arr.map(phoneId => getRequest(`/${phoneId}`))),\n  ]);\n};\n\nconst showDetails = (divClass, title, result) => {\n  document.body.insertAdjacentHTML('afterbegin', `\n    <div class=\"${divClass}\">\n      <h3 class=\"li-header\">${title}</h3>\n      <ul>\n        ${result.map(phone => `\n          <li>${phone.name} - ${phone.id.toUpperCase()}</li>\n        `).join('')}\n      </ul>\n    </div>\n  `);\n};\n\ngetPhoneIdList()\n  .then(idList => getAllReceivedDetails(idList))\n  .then(res => showDetails('all-successful', 'All Successful', res));\n\ngetPhoneIdList()\n  .then(idList => getFirstReceivedDetails(idList))\n  .then(res => showDetails('first-received', 'First Received', res));\n\ngetPhoneIdList()\n  .then(idList => getThreeFastestDetails(idList))\n  .then(res => showDetails('three-fastest', 'three fastest', res));\n"]}